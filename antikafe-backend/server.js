const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const dotenv = require('dotenv');

// –†–æ—É—Ç—ã
const authRoutes = require('./routes/authRoutes');
const bookingRoutes = require('./routes/bookingRoutes');
const productRoutes = require('./routes/productRoutes');
const guestRoutes = require('./routes/guestRoutes');
const userRoutes = require('./routes/userRoutes');
const saleRoutes = require('./routes/saleRoutes');
const settingsRoutes = require('./routes/settingsRoutes');
const shiftRoutes = require('./routes/shiftRoutes');

dotenv.config();

const app = express();

// ‚úÖ CORS –¥–æ –≤—Å–µ–≥–æ –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ
app.use(cors({
  origin: process.env.CLIENT_URL || '*', // –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è Vercel-–¥–æ–º–µ–Ω
  credentials: true,
}));

// ‚úÖ –ß—Ç–æ–±—ã Express –ø—Ä–∏–Ω–∏–º–∞–ª JSON
app.use(express.json());

// ‚úÖ –ü—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç-—ç–Ω–¥–ø–æ–∏–Ω—Ç
app.get('/api/test', (req, res) => {
  res.send('‚úÖ Backend —Ä–∞–±–æ—Ç–∞–µ—Ç!');
});

// üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–æ–≤
app.use('/api/auth', authRoutes);
app.use('/api/users', userRoutes);
app.use('/api/guests', guestRoutes);
app.use('/api/bookings', bookingRoutes);
app.use('/api/products', productRoutes);
app.use('/api/sales', saleRoutes);
app.use('/api/settings', settingsRoutes);
app.use('/api/shift', shiftRoutes);

// üì¶ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
mongoose.connect(process.env.MONGO_URI, {
  // –≠—Ç–∏ –æ–ø—Ü–∏–∏ —É–∂–µ –Ω–µ –Ω—É–∂–Ω—ã, –Ω–æ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å ‚Äî –Ω–µ –º–µ—à–∞—é—Ç
  useNewUrlParser: true,
  useUnifiedTopology: true,
}).then(async () => {
  console.log('‚úÖ MongoDB connected');

  // –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ email
  try {
    const User = require('./models/User');
    await User.collection.createIndex(
      { email: 1 },
      {
        unique: true,
        partialFilterExpression: { email: { $type: 'string' } },
      }
    );
    console.log('‚úÖ Partial index on email ensured');
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–∞:', err);
  }

  const PORT = process.env.PORT || 5000;
  app.listen(PORT, () => {
    console.log(`üöÄ Server running on port ${PORT}`);
  });
}).catch((err) => {
  console.error('‚ùå MongoDB connection error:', err);
});
