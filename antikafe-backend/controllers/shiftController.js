const Shift = require('../models/Shift');
const Company = require('../models/Company'); // –Ω–µ –∑–∞–±—É–¥—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å

exports.openShift = async (req, res) => {
  try {
    const { openingAmount, openingDenominations } = req.body;
    const { userId, companyId } = req.user;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å–º–µ–Ω–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞?
    const existingOpenShift = await Shift.findOne({ companyId, isOpen: true });
    if (existingOpenShift) {
      return res.status(400).json({ message: '–°–º–µ–Ω–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞' });
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–º–µ–Ω—ã
    const shift = new Shift({
      companyId,
      cashierId: userId,
      openingAmount,
      openingDenominations,
    });

    await shift.save();

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–∏–Ω–∞–ª—ã –≤ –∫–æ–º–ø–∞–Ω–∏—é
    await Company.findByIdAndUpdate(companyId, {
      lastDenominations: openingDenominations,
    });

    res.status(201).json({ message: '–°–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞', shift });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–º–µ–Ω—ã:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã', error: err.message });
  }
};

exports.closeShift = async (req, res) => {
  try {
    const {
      closingAmount,
      closingDenominations,
      cashWithdrawal = 0,
      cardAmountCalculated = 0,
      cardAmountEntered = 0
    } = req.body;

    const { userId, companyId } = req.user;

    const openShift = await Shift.findOne({ companyId, isOpen: true });
    if (!openShift) {
      return res.status(404).json({ message: '–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ–π —Å–º–µ–Ω—ã –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è' });
    }

    // üìâ –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –ø–æ –∫–∞—Ä—Ç–µ
    const cardMismatch = cardAmountEntered - cardAmountCalculated;

    openShift.closingAmount = closingAmount;
    openShift.closingDenominations = closingDenominations;
    openShift.cashWithdrawal = cashWithdrawal;
    openShift.cardAmountCalculated = cardAmountCalculated;
    openShift.cardAmountEntered = cardAmountEntered;
    openShift.cardMismatch = cardMismatch;

    openShift.closedAt = new Date();
    openShift.isOpen = false;

    await openShift.save();

    // üíæ –û–±–Ω–æ–≤–∏–º –∫–æ–º–ø–∞–Ω–∏—é: –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–º–∏–Ω–∞–ª—ã
    await Company.findByIdAndUpdate(companyId, {
      lastDenominations: closingDenominations,
    });

    res.status(200).json({
      message: '–°–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞',
      shift: openShift
    });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–º–µ–Ω—ã:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã', error: err.message });
  }
};
